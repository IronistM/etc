#!/usr/bin/env bash

if [ -f "install-clang" ]; then
    ./install-clang 3.8.0
fi

## R configure settings
: ${PREFIX="${HOME}/r/r-devel-san"}
: ${SANFLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer -fno-sanitize=float-divide-by-zero"}
: ${ENABLE_R_FRAMEWORK="no"}
: ${R_NO_BASE_COMPILE="yes"}

## R compilation flags
## Note that compilation takes too long with optimization enabled.
: ${CLANG="clang-3.8"}
: ${CC="clang-3.8 -std=gnu99 ${SANFLAGS}"}
: ${CFLAGS="-g -Wall -pedantic"}
: ${CXX="clang++-3.8 ${SANFLAGS}"}
: ${CXXFLAGS="-g -Wall -pedantic"}
: ${F77="gfortran"}
: ${FC="gfortran"}

## Make sure that we use the clang++ compiler when building
## the R executable, so that sanitizer machinery gets compiled
## in. Note that we need to use clang++ to enable e.g. the 'vptr'
## sanitizer for C++ code. See:
##
##   https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Using-Undefined-Behaviour-Sanitizer 
##
## for more information.
: ${LLVM_BIN_DIR="$(dirname `which clang-3.8 | xargs readlink`))"}
: ${MAIN_LD="clang++-3.8 -fsanitize=undefined -L\"${LLVM_BIN_DIR}/../lib/clang/3.8.0/lib/darwin\" -lclang_rt.asan_osx_dynamic"}

## Invoke install homebrew script with these variables
. install-r-homebrew || {
    echo "Failed to install R!"
    exit 1
}

## Update Renviron so that we don't make use of '~/.R/Makevars'
cat << EOF >> "${PREFIX}/lib/R/etc/Renviron"
R_MAKEVARS_USER='~/.R/Makevars.san'
R_LIBS_USER='${PREFIX}/library'
EOF

## Ensure 'Makevars.san' exists (otherwise R configure can break)
mkdir -p "~/.R"
touch "~/.R/Makevars.san"

