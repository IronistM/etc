#!/usr/bin/env bash

is-file () {
	test -f "$1"
}

is-dir () {
	test -d "$1"
}

is-empty () {
	test -z "$1"
}

is-nonempty () {
	test -n "$1"
}

import () {
	while test "$#" -ne 0; do
		if test -e "$1"; then
			# shellcheck disable=SC1090
			source "$1"
		fi
		shift
	done
}

has-command () {
	command -v "$1" &> /dev/null
}

section () {
	echo -e "\033[1;94m==>\033[0m \033[1;97m$1\033[0m"
}

success () {
	echo -e "\033[1;92m==>\033[0m \033[1;97m$1\033[0m"
}

error () {
	echo -e "\033[1;91mERROR: $1\033[0m"
	exit 1
}

joined () {

	if test "$#" -le 2; then
		echo "Usage: joined delimiter [values...]"
		return 1
	fi

	local SAVEIFS="${IFS}"
	IFS="$1"
	shift
	echo "$*"
	IFS="${SAVEIFS}"
}

defvar () {

	if test "$#" -eq 0; then
		echo "Usage: defvar [variable value]+"
		return 1
	fi

	while test "$#" -ge 2; do
		# shellcheck disable=SC2163
		eval "$1='$2'" && export "$1"
		shift 2
	done

}

defjoined () {

	if [ "$#" -le 2 ]; then
		echo "Usage: defjoined variable delimiter [values...]"
		return 1
	fi

	local VARIABLE="$1"
	shift
	defvar "${VARIABLE}" "$(joined "$@")"
}

rot13 () {
	echo "$@" | tr "A-Za-z" "N-ZA-Mn-za-m"
}

replace () {

	if [ "$#" -ne 2 ]; then
		echo "Usage: replace from to";
		return 1
	fi

	find . -type f -not -path '*/\.*' -exec perl -pi -e "s|\Q$1\E|$2|g" {} +

}

hascmd () {

	if [ "$#" -ne 1 ]; then
		echo "Usage: hascmd command"
		return 1
	fi

	command -v "$1" > /dev/null 2>&1
}

# Navigate up a number of directories.
up () {

	if [ "$#" -eq 0 ]; then
		echo "Usage: up n"
		return 1
	fi

	COUNT=1
	if test "$#" -eq 1
	then
		COUNT=$1
	fi

	while [ "${COUNT}" -ne 0 ]; do
		cd ..
		let COUNT=COUNT-1
	done
}

# Use ffpmeg to quickly convert a .mov to a .gif.
# Primarily used for quickly converting screencasts
# into gifs (which can then be viewed online easily)
mov2gif () {

	if [ "$#" -eq 0 ]; then
		echo "Usage: mov2gif input [output]"
		return 1
	fi

	if test "$#" -eq 1; then
		OUTPUT="${1%.mov}".gif
	else
		OUTPUT="$2"
	fi

	ffmpeg -i "$1" -r 20 -f image2pipe -vcodec ppm - | \
		convert -delay 5 -fuzz 1% -layers Optimize -loop 0 - "${OUTPUT}"
}

## Emacs

e () {
	if test "$#" -eq 0; then
		ALTERNATE_EDITOR="" emacsclient -t .
	else
		ALTERNATE_EDITOR="" emacsclient -t "$@"
	fi
}

# Open a file using emacsclient.
#
# I wasted way too much time making this work, but apparently
# emacsclient doesn't allow e.g.
#
#	 emacsclient file.txt -c -e "(print \"Sucker\")"
#
# so I ended up pasting the file visiting into the eval statement.
ec () {

	if test "$#" -ge 1; then

		read -r -d '' EMACSCLIENT_EVAL <<- EOM
		(progn
		(select-frame-set-input-focus (selected-frame))
		(set-frame-font "Droid Sans Mono-14" nil t)
		(find-file "$1")
		)
		EOM

		shift

	else

		read -r -d '' EMACSCLIENT_EVAL <<- EOM
		(progn
		(select-frame-set-input-focus (selected-frame))
		(set-frame-font "Droid Sans Mono-14" nil t)
		)
		EOM

	fi

	ALTERNATE_EDITOR="" emacsclient \
		--create-frame \
		--eval "${EMACSCLIENT_EVAL}"

}

b64encode () {
	openssl base64 -in "$1" | tr -d '\n'
}

dock () {
	docker-machine start docker-dev
	eval "$(docker-machine env docker-dev)"
}

