#!/usr/bin/env bash
# shellcheck disable=SC2086

# Initialization ---
TMUX_VERSION="$(tmux -V | cut -d" " -f2)"

# Helper Functions ----
tmux-config-output () {
    echo "${HOME}/.tmux/config/$(uname)-${TMUX_VERSION}/.tmux.conf"
}

warning () {
    echo "[$I]: $*"
}

# Configuration ----
: ${TMUX_CONFIG_INPUT="${HOME}/.tmux/.tmux.conf"}
: ${TMUX_CONFIG_OUTPUT="$(tmux-config-output)"}

# Global State ----

# The document, represented as an array of strings.
DOCUMENT=()

# A 'stack', representing the results of evaluating 'if' statements
# discovered within the tmux configuration generator. Values will be
# either 'y' or 'n'.
STACK="yyyyyyyy"

process-line () {

    # if we have no configuration directive, then just write
    # the line out as-is (when enabled)
    if ! [[ "${LINE}" =~ \ *\#+\ *@ ]]; then
        case "${STACK}" in
            *n*) ;;
            *y) DOCUMENT+=("${LINE}") ;;
        esac
        return 0
    fi

    # extract the configuration directive
    local DIRECTIVE
    DIRECTIVE="${LINE/*\#*\@/}"

    case "${DIRECTIVE}" in

    # 'if' statement: evaluate and check return result
    "if"*)
        local STATEMENT="${DIRECTIVE/if /}"
        eval "${STATEMENT}" &> /dev/null && STACK="${STACK}y" || STACK="${STACK}n"
    ;;

    # 'else' statement: flip state
    "else"*)
        case "${STACK}" in
        *y) STACK="${STACK%?}n" ;;
        *n) STACK="${STACK%?}y" ;;
        esac
    ;;

    # 'fi': pop the stack
    "fi"*)
        [ -z "${STACK}" ] && warning "unexpected 'fi'"
        STACK="${STACK%?}"
    ;;

    # unrecognized directive
    *)
        warning "unrecognized directive '${DIRECTIVE}'"
    esac

    DOCUMENT+=("${LINE}")
}

# Remove an old configuration file
mkdir -p "$(dirname "${TMUX_CONFIG_OUTPUT}")"
rm -f "${TMUX_CONFIG_OUTPUT}"

# Our engine -- read and process the file line-by-line
declare -i I=1
while IFS="" read -r LINE; do
    process-line "${LINE}" "${I}"
    I+=1
done < "${TMUX_CONFIG_INPUT}"

# Write the document to file
printf "%s\n" "${DOCUMENT[@]}" > "${TMUX_CONFIG_OUTPUT}"

# Ask tmux to source the generated file
tmux source-file "${TMUX_CONFIG_OUTPUT}"

